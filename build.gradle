/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
    id 'java'
    id 'idea'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'app.saikat'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':ConfigurationManagement')
    implementation project(':UrlManagement')

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.4.RELEASE'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.4.RELEASE'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.4.RELEASE'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.1.4.RELEASE'

    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-beta4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.4.RELEASE'

}

task createJar(type: Jar) {
    manifest {
        attributes (
            'Main-Class': 'app.saikat.NotifyServer.App',
            'Title': 'NotifyServer',
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
        with jar
    }
}

task copyDependencies(type: Copy) {
    for(File file: configurations.runtimeClasspath) {
        from(file.getAbsolutePath())
    }
    into "$buildDir/libs/"
}

createJar.dependsOn('copyDependencies')

build.finalizedBy createJar